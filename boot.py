import os
import time
import random
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# ConfiguraciÃ³n para Selenium en modo headless
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--user-data-dir=/tmp/user_data")  # Carpeta temporal para sesiÃ³n
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# Frases de respuesta dinÃ¡mica
morning_responses = [
    "Â¡Buenos dÃ­as! ğŸ˜Š",
    "Â¿QuÃ© tal? Espero que tengan un gran dÃ­a.",
    "Â¡Hola! Listos para otro dÃ­a.",
    "Buen dÃ­a, gente bonita. Â¿CÃ³mo estÃ¡n?",
    "Â¡Hola! Que tengan un dÃ­a increÃ­ble."
]

afternoon_responses = [
    "Â¡Buenas tardes! Â¿CÃ³mo va todo?",
    "Hola, buenas tardes. Â¿QuÃ© tal su dÃ­a?",
    "Â¡Buenas tardes! Espero que estÃ©n teniendo un buen dÃ­a.",
    "Que tal, buen dÃ­a a todos.",
    "Â¡Buenas tardes! Â¿QuÃ© tal la jornada?"
]

night_responses = [
    "Â¡Buenas noches! Que descansen bien.",
    "Buenas noches. Â¿CÃ³mo estuvo su dÃ­a?",
    "Â¡Buenas noches! Espero que haya sido un dÃ­a genial.",
    "Buenas noches, grupo. No olviden descansar.",
    "Â¡Chicos, descansen! MaÃ±ana serÃ¡ otro gran dÃ­a."
]

general_responses = [
    "Â¡Hola! Â¿CÃ³mo estÃ¡n todos?",
    "Â¡Buenas! Â¿QuÃ© tal su dÃ­a?",
    "Â¡Hola! Espero que estÃ©n bien.",
    "Â¡Hey! Â¿CÃ³mo van las cosas?",
    "Â¡Hola, equipo! Â¿QuÃ© cuentan?"
]

# FunciÃ³n para seleccionar respuesta basada en la hora
def get_time_based_response():
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        return random.choice(morning_responses)
    elif 12 <= current_hour < 18:
        return random.choice(afternoon_responses)
    elif 18 <= current_hour < 23:
        return random.choice(night_responses)
    else:
        return random.choice(general_responses)

# Inicializar el bot
try:
    print("Iniciando el navegador...")
    driver.get("https://web.whatsapp.com")

    print("Esperando que se escanee el cÃ³digo QR...")
    WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.CSS_SELECTOR, "._3Ul489")))
    print("SesiÃ³n iniciada correctamente.")

    # Obtener el grupo desde la variable de entorno
    target_group = os.getenv("TARGET_GROUP", "NombrePorDefecto")

    # Seleccionar el grupo
    search_box = WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "._3FRCZ.copyable-text.selectable-text"))
    )
    search_box.click()
    search_box.send_keys(target_group)
    search_box.send_keys(Keys.ENTER)

    print(f"Grupo '{target_group}' seleccionado.")

    while True:
        try:
            # Obtener el Ãºltimo mensaje
            messages = driver.find_elements(By.CSS_SELECTOR, "._1Gy50")
            if messages:
                last_message = messages[-1].text.lower()

                # Responder si el mensaje es un saludo
                if any(greeting in last_message for greeting in ["hola", "buenos dÃ­as", "buenas tardes", "buenas noches"]):
                    response = get_time_based_response()
                    input_box = driver.find_element(By.CSS_SELECTOR, "._3FRCZ.copyable-text.selectable-text")
                    input_box.click()
                    input_box.send_keys(response)
                    input_box.send_keys(Keys.ENTER)
                    print(f"Respondido con: {response}")

            time.sleep(5)
        except Exception as e:
            print(f"Error detectado: {e}")
            time.sleep(5)
except KeyboardInterrupt:
    print("Bot detenido manualmente.")
except Exception as e:
    print(f"Error al iniciar el bot: {e}")
finally:
    driver.quit()
    print("Navegador cerrado.")
